using JuMP, Gurobi

# Inicialização do modelo
model = Model(Gurobi.Optimizer)

# Parâmetros

T = 259200  # Horizonte de 72h

buildings = [
    "Main Building",      # Edifício principal
    "Warehouse",          # Armazém
    "Granary",            # Celeiro
    "Barracks",           # Quartel
    "Academy",            # Academia
    "Woodcutter",         # Campo de madeira
    "Clay Pit",           # Campo de barro
    "Iron Mine",          # Campo de ferro
    "Cropland",           # Campo de cereal
    "Rally Point"         # Ponto de Encontro 
]

# População gerada por cada construção
population = Dict{String, Vector{Int}}()

population["Main Building"] = [2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]

population["Warehouse"] = [1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]

population["Granary"] = [1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]

population["Barracks"] = [1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4]

population["Academy"] = [4, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4]

population["Woodcutter"] = [1, 1, 1, 2, 2, 2, 4, 4, 5, 6, 7, 9, 11, 13, 15, 18, 22, 27, 32, 38]

population["Clay Pit"] = [1, 1, 1, 2, 2, 2, 4, 4, 5, 6, 7, 9, 11, 13, 15, 18, 22, 27, 32, 38]

population["Iron Mine"] = [1, 1, 2, 2, 2, 3, 4, 4, 5, 6, 7, 9, 11, 13, 15, 18, 22, 27, 32, 38]

population["Cropland"] = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2]

population["Rally Point"] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]

# Tipos de Recursos
resources = ["Wood", "Clay", "Iron", "Crop"]

# Inicialização do dicionário de requisitos de construção
building_requirements = Dict{String, Dict{String, Int}}()

# Variáveis de decisão

@variable(model, total_population[1:T] >= 0, Int)

# x[s, l, t] binária: se o nível l da construção s foi iniciado no tempo t
@variable(model, x[eachindex(buildings), 1:20, 1:T], Bin)

# n[s, l, t] binária: se a construção s tem o nível l completo no tempo t
@variable(model, n[eachindex(buildings), 1:20, 1:T] >= 0, Bin)

# r[r, t] quantidade de recursos r disponíveis no tempo t
@variable(model, r[eachindex(resources), 1:T] >= 0, Int)

# q_t número de soldados treinados até o tempo t
@variable(model, q_t[1:T] >= 0, Int)

# q número total de soldados treinados
@variable(model, q >= 0, Int)

# Limite de 3 construções simultâneas
@variable(model, active_constructions[1:T] >= 0, Int)
for t in 1:T
    @constraint(model, active_constructions[t] <= 3)
    @constraint(model, active_constructions[t] == sum(
        x[s,l,τ] 
        for s in eachindex(buildings), l in 1:20 
        for τ in max(1, t - building_times[buildings[s]][l] + 1):t
        if value(x[s,l,τ]) > 0.5
    ))
end

# Recursos iniciais
for r_i in eachindex(resources)
    @constraint(model, r[r_i, 1] == 750)
end

for t in 1:T
    @constraint(model, total_population[t] == sum(
        n[s, l, t] * population[buildings[s]][l]
        for s in eachindex(buildings) 
        for l in 1:20
        if haskey(population, buildings[s])
    ))
end

# Main Building e campos de recurso já construídos no nível 1
for (s, name) in enumerate(buildings)
    if name == "Main Building" || name in ["Woodcutter", "Clay Pit", "Iron Mine", "Cropland"]
        @constraint(model, n[s, 1, 1] == 1)
    end
end

# Produção de cada campo de recurso por nível (unidades por hora)
resource_production = Dict(
    "Woodcutter" => Dict(l => 5 * l for l in 1:20),
    "Clay Pit"   => Dict(l => 5 * l for l in 1:20),
    "Iron Mine"  => Dict(l => 5 * l for l in 1:20),
    "Cropland"   => Dict(l => 5 * l for l in 1:20)
)

function building_for_resource(res)
    if res == "Wood"
        return "Woodcutter"
    elseif res == "Clay"
        return "Clay Pit"
    elseif res == "Iron"
        return "Iron Mine"
    elseif res == "Crop"
        return "Cropland"
    end
end

for t in 2:T, r_i in eachindex(resources)
    resource = resources[r_i]
    @constraint(model,
        r[r_i, t] == r[r_i, t-1] + 
        sum(
            n[s, l, t-1] * resource_production[buildings[s]][l] / 3600
            for s in eachindex(buildings) 
            if haskey(resource_production, buildings[s]) && buildings[s] == building_for_resource(resource)
            for l in 1:20
        )
        - sum(x[s,l,t] * resource_required[buildings[s], l][resource] for s in eachindex(buildings), l in 1:20)
        - (q_t[t] - q_t[t-1]) * soldier_cost[resource]
    )
end

# Consumo de Crop
@constraint(model, [t in 1:T],
    r[4, t] >= (total_population[t] + q_t[t]) / 3600  # Consumo por segundo
)

# Custos para cada tipo de construção
resource_required = Dict()

# Custos de Main Building
for lvl in 1:20
    main_building_costs = [
        70   40   60   20;
        90   50   75   25;
        115  65  100   35;
        145  85  125   40;
        190 105  160   55;
        240 135  205   70;
        310 175  265   90;
        395 225  340  115;
        505 290  430  145;
        645 370  555  185;
        825 470  710  235;
        1060 605 905 300;
        1355 775 1160 385;
        1735 990 1485 495;
        2220 1270 1900 635;
        2840 1625 2435 810;
        3635 2075 3115 1040;
        4650 2660 3990 1330;
        5955 3405 5105 1700;
        7620 4355 6535 2180
    ]
    resource_required["Main Building", lvl] = Dict(
        "Wood" => main_building_costs[lvl, 1],
        "Clay" => main_building_costs[lvl, 2],
        "Iron" => main_building_costs[lvl, 3],
        "Crop" => main_building_costs[lvl, 4]
    )
end
building_requirements["Main Building"] = Dict()

# Custos de Barracks
for lvl in 1:20
    barracks_costs = [
        210   140   260   120;
        270   180   335   155;
        345   230   425   195;
        440   295   545   250;
        565   375   700   320;
        720   480   895   410;
        925   615  1145   530;
        1180  790  1463   675;
        1515 1010  1875   865;
        1935 1290  2400  1105;
        2480 1655  3070  1415;
        3175 2115  3930  1815;
        4060 2710  5030  2320;
        5200 3465  6435  2970;
        6655 4435  8240  3805;
        8520 5680 10545  4870;
        10905 7270 13500 6230;
        13955 9305 17280 7975;
        17865 11910 22120 10210;
        22865 15245 28310 13065
    ]
    resource_required["Barracks", lvl] = Dict(
        "Wood" => barracks_costs[lvl, 1],
        "Clay" => barracks_costs[lvl, 2],
        "Iron" => barracks_costs[lvl, 3],
        "Crop" => barracks_costs[lvl, 4]
    )
end
building_requirements["Barracks"] = Dict("Main Building" => 3, "Rally Point" => 1)

# Custos de Academy
for lvl in 1:20
    academy_costs = [
        220   160    90    40;
        280   205   115    50;
        360   260   145    65;
        460   335   190    85;
        590   430   240   105;
        755   550   310   135;
        970   705   395   175;
        1240  900   505   225;
        1585 1155   650   290;
        2030 1475   830   370;
        2595 1890  1065   470;
        3325 2420  1360   605;
        4255 3095  1740   775;
        5445 3960  2230   990;
        6970 5070  2850  1270;
        8925 6490  3650  1625;
        11425 8310 4675  2075;
        14620 10635 5980 2660;
        18715 13610 7655 3405;
        23955 17420 9800 4355
    ]

    resource_required["Academy", lvl] = Dict(
        "Wood" => academy_costs[lvl, 1],
        "Clay" => academy_costs[lvl, 2],
        "Iron" => academy_costs[lvl, 3],
        "Crop" => academy_costs[lvl, 4]
    )
end
building_requirements["Academy"] = Dict()

# Custos de Warehouse
for lvl in 1:20
    warehouse_costs = [
        130   160    90   40;
        165   205   115   50;
        215   260   145   65;
        275   335   190   85;
        350   430   240  105;
        445   550   310  135;
        570   705   395  175;
        730   900   505  225;
        935  1155   650  290;
        1200 1475   830  370;
        1535 1890  1065  470;
        1965 2420  1360  705;
        2515 3195  1740  975;
        3220 3960  2230  990;
        4120 5070  2850 1270;
        5275 6490  3650 1625;
        6750 8310  4675 2075;
        8640 10635 5980 2660;
        11060 13610 7655 3405;
        14155 17420 9800 4355
    ]
    resource_required["Warehouse", lvl] = Dict(
        "Wood" => warehouse_costs[lvl, 1],
        "Clay" => warehouse_costs[lvl, 2],
        "Iron" => warehouse_costs[lvl, 3],
        "Crop" => warehouse_costs[lvl, 4]
    )
end
building_requirements["Warehouse"] = Dict()

# Custos de Granary
for lvl in 1:20
    granary_costs = [
        80    100   70    20   270;
        100   130   90    25   345;
        130   165   115   35   445;
        170   210   145   40   565;
        215   270   190   55   730;
        275   345   240   70   930;
        350   440   310   90   1190;
        450   565   395   115  1525;
        575   720   505   145  1945;
        740   920   645   185  2490;
        945   1180  825   235  3185;
        1210  1510  1060  300  4080;
        1545  1935  1355  385  5220;
        1980  2475  1735  495  6685;
        2535  3170  2220  635  8560;
        3245  4055  2840  810  10950;
        4155  5190  3635  1040 14020;
        5315  6645  4650  1330 17940;
        6805  8505  5955  1700 22965;
        8710  10890 7620  2180 29400
    ]
    resource_required["Granary", lvl] = Dict(
        "Wood" => granary_costs[lvl, 1],
        "Clay" => granary_costs[lvl, 2],
        "Iron" => granary_costs[lvl, 3],
        "Crop" => granary_costs[lvl, 4],
        "Upkeep" => granary_costs[lvl, 5]
    )
end
building_requirements["Granary"] = Dict()

# Custos de Woodcutter
for lvl in 1:20
    woodcutter_costs = [
        40     100    50     60;  
        65     165    85    100;
        110    280   140    165;
        185    465   235    280;
        310    780   390    465;
        520   1300   650    780;
        870   2170  1085   1300;
        1450  3625  1810   2175;
        2420  6050  3025   3630;
        4040 10105  5050   6060;
        6750 16870  8435  10125;
        11270 28175 14090 16905;
        18820 47055 23525 28230;
        31430 78580 39290 47150;
        52490 131230 65615 78740;
        87660 219155 109755 131490;
        146395 365985 182995 219590;
        244480 611195 305600 366715;
        408280 1020695 510350 612420;
        681825 1704565 852280 1022740
    ]

    resource_required["Woodcutter", lvl] = Dict(
        "Wood" => woodcutter_costs[lvl, 1],
        "Clay" => woodcutter_costs[lvl, 2],
        "Iron" => woodcutter_costs[lvl, 3],
        "Crop" => woodcutter_costs[lvl, 4]
    )
end
building_requirements["Woodcutter"] = Dict()

# Custos de Clay Pit
for lvl in 1:20
    clay_pit_costs = [
        80    40    80    50;
        135   65   135    85;
        225  110   225   140;
        375  185   375   235;
        620  310   620   390;
        1040 520  1040   650;
        1735 870  1735  1085;
        2900 1450 2900  1810;
        4840 2420 4840  3025;
        8080 4040 8080  5050;
        13500 6750 13500 8435;
        22540 11270 22540 14090;
        37645 18820 37645 23525;
        62865 31430 62865 39290;
        104985 52490 104985 65615;
        175320 87660 175320 109575;
        292790 146395 292790 182995;
        488955 244480 488955 305600;
        816555 408280 816555 510350;
        1363650 681825 1363650 852280
    ]

    resource_required["Clay Pit", lvl] = Dict(
        "Wood" => clay_pit_costs[lvl, 1],
        "Clay" => clay_pit_costs[lvl, 2],
        "Iron" => clay_pit_costs[lvl, 3],
        "Crop" => clay_pit_costs[lvl, 4]
    )
end
building_requirements["Clay Pit"] = Dict()

# Custos de Iron Mine
for lvl in 1:20
    iron_mine_costs = [
        100     80     30     60;
        165    135     50    100;
        280    225     85    165;
        465    375    140    280;
        780    620    235    465;
        1300  1040    390    780;
        2170  1735    650   1300;
        3625  2900   1085   2175;
        6050  4840   1815   3630;
        10105 8080   3030   6060;
        16870 13500  5060  10125;
        28175 22540  8455  16905;
        47055 37645 14115  28230;
        78580 62865 23575  47150;
        131230 104985 39370 78740;
        219155 175320 65745 131490;
        365985 292790 109795 219590;
        611195 488955 183360 366715;
        1020695 816555 306210 612420;
        1704565 1363650 511370 1022740
    ]

    resource_required["Iron Mine", lvl] = Dict(
        "Wood" => iron_mine_costs[lvl, 1],
        "Clay" => iron_mine_costs[lvl, 2],
        "Iron" => iron_mine_costs[lvl, 3],
        "Crop" => iron_mine_costs[lvl, 4]
    )
end
building_requirements["Iron Mine"] = Dict()

# Custos de Cropland
for lvl in 1:20
    cropland_costs = [
         70    90     70     20;
        115   150    115     35;
        195   250    195     55;
        325   420    325     95;
        545   700    545    155;
        910  1170    910    260;
        1520 1950   1520    435;
        2535 3260   2535    725;
        4235 5445   4235   1210;
        7070 9095   7070   2020;
        11810 15185 11810  3375;
        19725 25360 19725  5635;
        32940 42350 32940  9410;
        55005 70720 55005 15715;
        91860 118105 91860 26245;
        153405 197240 153405 43830;
        256190 329385 256190 73195;
        427835 550075 427835 122240;
        714485 918625 714485 204140;
        1193195 1534105 1193195 340915
    ]

    resource_required["Cropland", lvl] = Dict(
        "Wood" => cropland_costs[lvl, 1],
        "Clay" => cropland_costs[lvl, 2],
        "Iron" => cropland_costs[lvl, 3],
        "Crop" => cropland_costs[lvl, 4]
    )
end
building_requirements["Cropland"] = Dict()

# Custos de Rally Point
for lvl in 1:20
    rally_point_costs = [
        110   160   90   70;
        140   205  115   90;
        180   260  145  115;
        230   335  190  145;
        295   430  240  190;
        380   550  310  240;
        485   705  395  310;
        615   900  505  395;
        790  1155  645  505;
        1010 1475  830  650;
        1290 1890 1060  830;
        1655 2420 1360 1065;
        2115 3100 1740 1360;
        2710 3965 2225 1740;
        3485 5070 2850 2220;
        4460 6490 3650 2840;
        5710 8310 4675 3635;
        7270 10645 5970 4675;
        9305 13625 7645 5980;
        11910 17440 9785 7655
    ]

    resource_required["Rally Point", lvl] = Dict(
        "Wood" => rally_point_costs[lvl, 1],
        "Clay" => rally_point_costs[lvl, 2],
        "Iron" => rally_point_costs[lvl, 3],
        "Crop" => rally_point_costs[lvl, 4]
    )
end
building_requirements["Rally Point"] = Dict()

# Tempo necessário para cada construção

building_base_times = Dict(
    "Main Building" => [
        33 * 60 + 20,    # L1: 0:33:20 → 2000s (base: 2000*3/1.3 ≈ 4615s)
        43 * 60 + 40,    # L2: 0:43:40 → 2620s (base: 2620*3/1.3 ≈ 6046s)
        55 * 60 + 40,    # L3: 0:55:40 → 3340s (base: 3340*3/1.3 ≈ 7708s)
        69 * 60 + 30,    # L4: 1:09:30 → 4170s (base: 4170*3/1.3 ≈ 9623s)
        85 * 60 + 40,    # L5: 1:25:40 → 5140s (base: 5140*3/1.3 ≈ 11862s)
        104 * 60 + 20,   # L6: 1:44:20 → 6260s (base: 6260*3/1.3 ≈ 14446s)
        126 * 60 + 10,   # L7: 2:06:10 → 7570s (base: 7570*3/1.3 ≈ 17469s)
        151 * 60 + 20,   # L8: 2:31:20 → 9080s (base: 9080*3/1.3 ≈ 20954s)
        180 * 60 + 30,   # L9: 3:00:30 → 10830s (base: 10830*3/1.3 ≈ 24992s)
        214 * 60 + 20,   # L10: 3:34:20 → 12860s (base: 12860*3/1.3 ≈ 29677s)
        253 * 60 + 40,   # L11: 4:13:40 → 15220s (base: 15220*3/1.3 ≈ 35123s)
        299 * 60 + 10,   # L12: 4:59:10 → 17950s (base: 17950*3/1.3 ≈ 41423s)
        352 * 60 + 10,   # L13: 5:52:10 → 21130s (base: 21130*3/1.3 ≈ 48762s)
        413 * 60 + 30,   # L14: 6:53:30 → 24810s (base: 24810*3/1.3 ≈ 57254s)
        484 * 60 + 40,   # L15: 8:04:40 → 29080s (base: 29080*3/1.3 ≈ 67108s)
        567 * 60 + 10,   # L16: 9:27:10 → 34030s (base: 34030*3/1.3 ≈ 78531s)
        662 * 60 + 50,   # L17: 11:02:50 → 39770s (base: 39770*3/1.3 ≈ 91777s)
        774 * 60 + 0,    # L18: 12:54:00 → 46440s (base: 46440*3/1.3 ≈ 107169s)
        902 * 60 + 50,   # L19: 15:02:50 → 54170s (base: 54170*3/1.3 ≈ 125008s)
        1052 * 60 + 10,  # L20: 17:32:10 → 63130s (base: 63130*3/1.3 ≈ 145685s)
    ],
    "Barracks" => Dict(
        # Key: Main Building level, Value: Array of Barracks build times (levels 1-20) in seconds
        3  => [1860, 2430, 3100, 3880, 4780, 5820, 7030, 8430, 10060, 11950, 14140, 16680, 19630, 23050, 27020, 31620, 36960, 43150, 50340, 58670],
        4  => [1790, 2350, 2990, 3740, 4610, 5610, 6780, 8130,  9690, 11520, 13630, 16080, 18930, 22220, 26060, 30540, 35730, 41720, 48660, 56660],
        5  => [1730, 2260, 2880, 3600, 4440, 5410, 6530, 7840,  9350, 11110, 13140, 15510, 18250, 21420, 25140, 29460, 34480, 40280, 47000, 54760],
        6  => [1670, 2180, 2780, 3470, 4280, 5210, 6300, 7560,  9020, 10710, 12670, 14950, 17610, 20650, 24230, 28410, 33260, 38860, 45340, 52830],
        7  => [1610, 2100, 2680, 3350, 4130, 5030, 6070, 7290,  8700, 10330, 12220, 14430, 16990, 19930, 23390, 27410, 32090, 37480, 43740, 50960],
        8  => [1550, 2030, 2580, 3230, 3980, 4850, 5860, 7030,  8390,  9960, 11780, 13910, 16370, 19210, 22550, 26430, 30940, 36140, 42180, 49150],
        9  => [1490, 1950, 2490, 3110, 3830, 4670, 5640, 6770,  8080,  9590, 11350, 13390, 15770, 18500, 21710, 25450, 29790, 34800, 40600, 47310],
        10 => [1440, 1880, 2400, 3000, 3700, 4500, 5440, 6530,  7790,  9250, 10940, 12910, 15210, 17840, 20930, 24540, 28730, 33560, 39160, 45630],
        11 => [1390, 1820, 2310, 2890, 3570, 4340, 5250, 6300,  7520,  8920, 10550, 12460, 14670, 17220, 20210, 23690, 27730, 32390, 37790, 44030],
        12 => [1340, 1750, 2230, 2790, 3440, 4190, 5060, 6080,  7250,  8600, 10170, 12010, 14140, 16590, 19470, 22830, 26730, 31220, 36430, 42450],
        13 => [1290, 1690, 2150, 2690, 3310, 4030, 4870, 5850,  6980,  8280,  9790, 11560, 13610, 15970, 18740, 21970, 25730, 30050, 35060, 40850],
        14 => [1240, 1630, 2070, 2590, 3190, 3880, 4690, 5630,  6720,  7970,  9420, 11130, 13100, 15370, 18040, 21150, 24770, 28930, 33750, 39330],
        15 => [1200, 1570, 2000, 2500, 3080, 3750, 4530, 5440,  6490,  7700,  9100, 10750, 12650, 14850, 17430, 20430, 23920, 27940, 32600, 37990],
        16 => [1150, 1510, 1920, 2400, 2960, 3600, 4350, 5220,  6230,  7390,  8740, 10320, 12150, 14260, 16730, 19620, 22970, 26830, 31300, 36480],
        17 => [1110, 1460, 1860, 2320, 2860, 3480, 4210, 5050,  6030,  7150,  8460,  9980, 11760, 13790, 16180, 18970, 22210, 25950, 30280, 35280],
        18 => [1070, 1400, 1790, 2230, 2750, 3350, 4040, 4850,  5790,  6870,  8120,  9590, 11290, 13250, 15550, 18230, 21350, 24940, 29100, 33910],
        19 => [1030, 1350, 1720, 2150, 2650, 3230, 3900, 4680,  5590,  6630,  7840,  9250, 10900, 12790, 15010, 17590, 20590, 24050, 28060, 32690],
        20 => [1000, 1310, 1660, 2080, 2560, 3120, 3770, 4520,  5400,  6400,  7570,  8930, 10520, 12350, 14490, 16980, 19880, 23220, 27090, 31560],
    ),
    "Academy" => Dict(
        3  => [1860, 2430, 3100, 3880, 4780, 5820, 7030, 8430, 10060, 11950, 14140, 16680, 19630, 23050, 27020, 31620, 36960, 43150, 50340, 58670],
        4  => [1800, 2350, 2990, 3740, 4610, 5610, 6780, 8130,  9690, 11520, 13630, 16080, 18930, 22220, 26060, 30540, 35730, 41720, 48660, 56660],
        5  => [1720, 2250, 2880, 3600, 4440, 5410, 6530, 7840,  9350, 11110, 13140, 15510, 18250, 21420, 25140, 29460, 34480, 40280, 47000, 54760],
        6  => [1480, 2180, 2780, 3470, 4280, 5210, 6300, 7560,  9020, 10710, 12670, 14950, 17610, 20650, 24230, 28410, 33260, 38860, 45340, 52830],
        7  => [1600, 2100, 2680, 3350, 4130, 5030, 6070, 7290,  8700, 10330, 12220, 14430, 16990, 19930, 23390, 27410, 32090, 37480, 43740, 50960],
        8  => [1540, 2030, 2580, 3230, 3980, 4850, 5860, 7030,  8390,  9960, 11780, 13910, 16370, 19210, 22550, 26430, 30940, 36140, 42180, 49150],
        9  => [1500, 1950, 2490, 3110, 3830, 4670, 5640, 6770,  8080,  9590, 11350, 13390, 15770, 18500, 21710, 25450, 29790, 34800, 40600, 47310],
        10 => [1440, 1880, 2400, 3000, 3700, 4500, 5440, 6530,  7790,  9250, 10940, 12910, 15210, 17840, 20930, 24540, 28730, 33560, 39160, 45630],
        11 => [1380, 1820, 2310, 2890, 3570, 4340, 5250, 6300,  7520,  8920, 10550, 12460, 14670, 17220, 20210, 23690, 27730, 32390, 37790, 44030],
        12 => [1340, 1750, 2230, 2790, 3440, 4190, 5060, 6080,  7250,  8600, 10170, 12010, 14140, 16590, 19470, 22830, 26730, 31220, 36430, 42450],
        13 => [1280, 1690, 2150, 2690, 3310, 4030, 4870, 5850,  6980,  8280,  9790, 11560, 13610, 15970, 18740, 21970, 25730, 30050, 35060, 40850],
        14 => [1240, 1630, 2070, 2590, 3190, 3880, 4690, 5630,  6720,  7970,  9420, 11130, 13100, 15370, 18040, 21150, 24770, 28930, 33750, 39330],
        15 => [1200, 1570, 2000, 2500, 3080, 3750, 4530, 5440,  6490,  7700,  9100, 10750, 12650, 14850, 17430, 20430, 23920, 27940, 32600, 37990],
        16 => [1160, 1510, 1920, 2400, 2960, 3600, 4350, 5220,  6230,  7390,  8740, 10320, 12150, 14260, 16730, 19620, 22970, 26830, 31300, 36480],
        17 => [1120, 1460, 1860, 2320, 2860, 3480, 4210, 5050,  6030,  7150,  8460,  9980, 11760, 13790, 16180, 18970, 22210, 25950, 30280, 35280],
        18 => [1080, 1400, 1790, 2230, 2750, 3350, 4040, 4850,  5790,  6870,  8120,  9590, 11290, 13250, 15550, 18230, 21350, 24940, 29100, 33910],
        19 => [1040, 1350, 1720, 2150, 2650, 3230, 3900, 4680,  5590,  6630,  7840,  9250, 10900, 12790, 15010, 17590, 20590, 24050, 28060, 32690],
        20 => [1000, 1310, 1660, 2080, 2560, 3120, 3770, 4520,  5400,  6400,  7570,  8930, 10520, 12350, 14490, 16980, 19880, 23220, 27090, 31560],
    ),
    "Warehouse" => Dict(
        # Key: Main Building level, Value: Array of Warehouse build times (levels 1-20) in seconds
        1  => [2000, 2430, 3340, 4170, 5140, 6260, 7570, 9080, 10830, 12860, 15220, 17950, 21130, 24810, 29080, 34030, 39770, 46440, 54170, 63130],
        2  => [1930, 2530, 3220, 4020, 4960, 6040, 7300, 8760, 10440, 12400, 14680, 17300, 20370, 23900, 28030, 32820, 38380, 44800, 52260, 60920],
        3  => [1860, 2430, 3100, 3880, 4780, 5820, 7030, 8430, 10060, 11950, 14140, 16680, 19630, 23050, 27020, 31620, 36960, 43150, 50340, 58670],
        4  => [1740, 2350, 2990, 3740, 4610, 5610, 6780, 8130,  9690, 11520, 13630, 16080, 18930, 22220, 26060, 30540, 35730, 41720, 48660, 56660],
        5  => [1720, 2260, 2880, 3600, 4440, 5410, 6530, 7840,  9350, 11110, 13140, 15510, 18250, 21420, 25140, 29460, 34480, 40280, 47000, 54760],
        6  => [1660, 2180, 2780, 3470, 4280, 5210, 6300, 7560,  9020, 10710, 12670, 14950, 17610, 20650, 24230, 28410, 33260, 38860, 45340, 52830],
        7  => [1600, 2100, 2680, 3350, 4130, 5030, 6070, 7290,  8700, 10330, 12220, 14430, 16990, 19930, 23390, 27410, 32090, 37480, 43740, 50960],
        8  => [1520, 2030, 2580, 3230, 3980, 4850, 5860, 7030,  8390,  9960, 11780, 13910, 16370, 19210, 22550, 26430, 30940, 36140, 42180, 49150],
        9  => [1500, 1950, 2490, 3110, 3830, 4670, 5640, 6770,  8080,  9590, 11350, 13390, 15770, 18500, 21710, 25450, 29790, 34800, 40600, 47310],
        10 => [1440, 1880, 2400, 3000, 3700, 4500, 5440, 6530,  7790,  9250, 10940, 12910, 15210, 17840, 20930, 24540, 28730, 33560, 39160, 45630],
        11 => [2000, 1820, 2310, 2890, 3570, 4340, 5250, 6300,  7520,  8920, 10550, 12460, 14670, 17220, 20210, 23690, 27730, 32390, 37790, 44030],
        12 => [2000, 1750, 2230, 2790, 3440, 4190, 5060, 6080,  7250,  8600, 10170, 12010, 14140, 16590, 19470, 22830, 26730, 31220, 36430, 42450],
        13 => [2000, 1690, 2150, 2690, 3310, 4030, 4870, 5850,  6980,  8280,  9790, 11560, 13610, 15970, 18740, 21970, 25730, 30050, 35060, 40850],
        14 => [2000, 1630, 2070, 2590, 3190, 3880, 4690, 5630,  6720,  7970,  9420, 11130, 13100, 15370, 18040, 21150, 24770, 28930, 33750, 39330],
        15 => [2000, 1570, 2000, 2500, 3080, 3750, 4530, 5440,  6490,  7700,  9100, 10750, 12650, 14850, 17430, 20430, 23920, 27940, 32600, 37990],
        16 => [1140, 1510, 1920, 2400, 2960, 3600, 4350, 5220,  6230,  7390,  8740, 10320, 12150, 14260, 16730, 19620, 22970, 26830, 31300, 36480],
        17 => [2000, 1460, 1860, 2320, 2860, 3480, 4210, 5050,  6030,  7150,  8460,  9980, 11760, 13790, 16180, 18970, 22210, 25950, 30280, 35280],
        18 => [2000, 1400, 1790, 2230, 2750, 3350, 4040, 4850,  5790,  6870,  8120,  9590, 11290, 13250, 15550, 18230, 21350, 24940, 29100, 33910],
        19 => [2000, 1350, 1720, 2150, 2650, 3230, 3900, 4680,  5590,  6630,  7840,  9250, 10900, 12790, 15010, 17590, 20590, 24050, 28060, 32690],
        20 => [1000, 1310, 1660, 2080, 2560, 3120, 3770, 4520,  5400,  6400,  7570,  8930, 10520, 12350, 14490, 16980, 19880, 23220, 27090, 31560],
    ),
    "Granary" => Dict(
        # Key: Main Building level, Value: Array of Granary build times (levels 1-20) in seconds
        1  => [1600, 2160, 2800, 3550, 4420, 5420, 6590, 7950, 9520, 11340, 13420, 15850, 18670, 21930, 25720, 30120, 35210, 41110, 47920, 55820],
        2  => [1540, 2080, 2700, 3430, 4270, 5210, 6330, 7630, 9140, 10870, 12860, 15190, 17890, 21000, 24630, 28840, 33740, 39400, 45960, 53560],
        3  => [1490, 2000, 2600, 3310, 4130, 5030, 6120, 7380, 8840, 10510, 12430, 14690, 17300, 20310, 23820, 27890, 32630, 38100, 44440, 51790],
        4  => [1430, 1930, 2510, 3200, 4000, 4880, 5940, 7160, 8580, 10200, 12070, 14260, 16800, 19720, 23140, 27090, 31690, 37000, 43160, 50300],
        5  => [1380, 1860, 2430, 3100, 3880, 4730, 5760, 6950, 8330, 9900, 11720, 13840, 16310, 19150, 22470, 26310, 30790, 35950, 41930, 48860],
        6  => [1330, 1800, 2350, 3000, 3760, 4590, 5590, 6750, 8090, 9620, 11390, 13450, 15850, 18610, 21840, 25570, 29930, 34950, 40770, 47510],
        7  => [1280, 1740, 2280, 2910, 3650, 4460, 5430, 6560, 7870, 9360, 11080, 13090, 15430, 18120, 21270, 24910, 29160, 34050, 39720, 46290],
        8  => [1240, 1690, 2210, 2830, 3550, 4340, 5290, 6390, 7670, 9120, 10800, 12760, 15040, 17660, 20730, 24280, 28420, 33190, 38720, 45120],
        9  => [1190, 1630, 2140, 2740, 3440, 4210, 5130, 6200, 7440, 8850, 10480, 12380, 14600, 17150, 20130, 23580, 27600, 32230, 37590, 43810],
        10 => [1150, 1580, 2080, 2660, 3340, 4090, 4990, 6030, 7240, 8610, 10190, 12040, 14200, 16680, 19580, 22930, 26850, 31350, 36570, 42620],
        11 => [1110, 1530, 2010, 2580, 3240, 3970, 4850, 5860, 7040, 8380, 9920, 11720, 13820, 16230, 19050, 22320, 26130, 30520, 35600, 41490],
        12 => [1070, 1480, 1950, 2500, 3150, 3860, 4710, 5700, 6850, 8150, 9650, 11400, 13450, 15800, 18550, 21730, 25450, 29730, 34680, 40410],
        13 => [1030, 1430, 1890, 2430, 3060, 3750, 4580, 5540, 6660, 7930, 9390, 11100, 13090, 15370, 18040, 21130, 24740, 28900, 33710, 39290],
        14 => [990, 1380, 1830, 2360, 2980, 3650, 4460, 5400, 6490, 7730, 9150, 10820, 12760, 14990, 17600, 20620, 24150, 28210, 32910, 38350],
        15 => [960, 1330, 1770, 2280, 2880, 3530, 4320, 5230, 6290, 7500, 8880, 10500, 12380, 14540, 17070, 20000, 23420, 27360, 31910, 37190],
        16 => [920, 1280, 1710, 2210, 2790, 3420, 4190, 5070, 6100, 7270, 8610, 10180, 12010, 14110, 16570, 19410, 22730, 26550, 30970, 36090],
        17 => [890, 1230, 1650, 2130, 2690, 3300, 4040, 4900, 5900, 7030, 8330, 9850, 11620, 13650, 16030, 18780, 22000, 25700, 29980, 34940],
        18 => [860, 1190, 1600, 2060, 2610, 3200, 3920, 4750, 5720, 6820, 8080, 9550, 11270, 13240, 15550, 18220, 21340, 24930, 29080, 33890],
        19 => [830, 1150, 1550, 2000, 2530, 3100, 3800, 4610, 5550, 6620, 7840, 9270, 10940, 12850, 15090, 17680, 20710, 24190, 28220, 32890],
        20 => [800, 1110, 1500, 1940, 2450, 3010, 3690, 4480, 5400, 6440, 7630, 9020, 10640, 12500, 14680, 17200, 20150, 23540, 27460, 32000],
    ),
    "Woodcutter" => Dict(
        # Key: Main Building level, Value: Array of Woodcutter build times (levels 1-20) in seconds
        1  => [1200, 1800, 2700, 4050, 6075, 9113, 13669, 20504, 30756, 46134, 69201, 103802, 155703, 233555, 350333, 525500, 788250, 1182375, 1773563, 2660345],
        2  => [1150, 1725, 2588, 3882, 5823, 8735, 13103, 19655, 29483, 44225, 66338, 99507, 149261, 223892, 335838, 503757, 755636, 1133454, 1700181, 2550272],
        3  => [1100, 1650, 2475, 3713, 5569, 8354, 12531, 18797, 28196, 42294, 63441, 95162, 142743, 214115, 321173, 481760, 722640, 1083960, 1625940, 2438910],
        4  => [1050, 1575, 2363, 3545, 5318, 7977, 11966, 17949, 26924, 40386, 60579, 90869, 136304, 204456, 306684, 460026, 690039, 1035059, 1552589, 2328884],
        5  => [1000, 1500, 2250, 3375, 5063, 7595, 11393, 17090, 25635, 38453, 57680, 86520, 129780, 194670, 292005, 438008, 657012, 985518, 1478277, 2217416],
        6  => [950, 1425, 2138, 3207, 4811, 7217, 10826, 16239, 24359, 36539, 54809, 82214, 123321, 184982, 277473, 416210, 624315, 936473, 1404710, 2107065],
        7  => [900, 1350, 2025, 3038, 4557, 6836, 10254, 15381, 23072, 34608, 51912, 77868, 116802, 175203, 262805, 394208, 591312, 886968, 1330452, 1995678],
        8  => [850, 1275, 1913, 2870, 4305, 6458, 9687, 14531, 21797, 32696, 49044, 73566, 110349, 165524, 248286, 372429, 558644, 837966, 1256949, 1885424],
        9  => [800, 1200, 1800, 2700, 4050, 6075, 9113, 13669, 20504, 30756, 46134, 69201, 103802, 155703, 233555, 350333, 525500, 788250, 1182375, 1773563],
        10 => [750, 1125, 1688, 2532, 3798, 5697, 8546, 12819, 19229, 28844, 43266, 64899, 97349, 146024, 219036, 328554, 492831, 739247, 1108871, 1663307],
        11 => [700, 1050, 1575, 2363, 3545, 5318, 7977, 11966, 17949, 26924, 40386, 60579, 90869, 136304, 204456, 306684, 460026, 690039, 1035059, 1552589],
        12 => [650, 975, 1463, 2195, 3293, 4940, 7410, 11115, 16673, 25010, 37515, 56273, 84410, 126615, 189923, 284885, 427328, 640992, 961488, 1442232],
        13 => [600, 900, 1350, 2025, 3038, 4557, 6836, 10254, 15381, 23072, 34608, 51912, 77868, 116802, 175203, 262805, 394208, 591312, 886968, 1330452],
        14 => [550, 825, 1238, 1857, 2786, 4179, 6269, 9404, 14106, 21159, 31739, 47609, 71414, 107121, 160682, 241023, 361535, 542303, 813455, 1220183],
        15 => [500, 750, 1125, 1688, 2532, 3798, 5697, 8546, 12819, 19229, 28844, 43266, 64899, 97349, 146024, 219036, 328554, 492831, 739247, 1108871],
        16 => [450, 675, 1013, 1520, 2280, 3420, 5130, 7695, 11543, 17315, 25973, 38960, 58440, 87660, 131490, 197235, 295853, 443780, 665670, 998505],
        17 => [400, 600, 900, 1350, 2025, 3038, 4557, 6836, 10254, 15381, 23072, 34608, 51912, 77868, 116802, 175203, 262805, 394208, 591312, 886968],
        18 => [350, 525, 788, 1182, 1773, 2660, 3990, 5985, 8978, 13467, 20201, 30302, 45453, 68180, 102270, 153405, 230108, 345162, 517743, 776615],
        19 => [300, 450, 675, 1013, 1520, 2280, 3420, 5130, 7695, 11543, 17315, 25973, 38960, 58440, 87660, 131490, 197235, 295853, 443780, 665670],
        20 => [250, 375, 563, 845, 1268, 1902, 2853, 4280, 6420, 9630, 14445, 21668, 32502, 48753, 73130, 109695, 164543, 246815, 370223, 555335],
    ),
    "Clay Pit" => Dict(
        # Key: Main Building level, Value: Array of Clay Pit build times (levels 1-20) in seconds
        1  => [220, 210, 200, 200, 190, 180, 180, 170, 160, 160],
        2  => [550, 530, 510, 490, 480, 460, 440, 430, 410, 400],
        3  => [1080, 1040, 1010, 970, 940, 900, 870, 840, 810, 780],
        4  => [1930, 1860, 1800, 1730, 1670, 1610, 1550, 1500, 1440, 1390],
        5  => [3290, 3170, 3060, 2950, 2840, 2740, 2640, 2550, 2460, 2370],
        6  => [5470, 5270, 5080, 4900, 4720, 4550, 4390, 4230, 4080, 3930],
        7  => [8950, 8630, 8320, 8020, 7730, 7450, 7180, 6920, 6670, 6430],
        8  => [14520, 14000, 13490, 13010, 12540, 12090, 11650, 11230, 10820, 10420],
        9  => [23430, 22590, 21780, 20990, 20220, 19470, 18750, 18050, 17370, 16710],
        10 =>  [37690, 36330, 35030, 33770, 32550, 31380, 30250, 29160, 28110, 27100],
        11 =>  [60510, 58330, 56230, 54200, 52250, 50370, 48560, 46810, 45120, 43490],
        12 =>  [97010, 93520, 90150, 86910, 83780, 80760, 77850, 75050, 72350, 69740],
        13 =>  [155410, 149820, 144430, 139220, 134190, 129340, 124660, 120140, 115790, 111590],
        14 =>  [248870, 239940, 231270, 222850, 214680, 206730, 199020, 191530, 184260, 177200],
        15 =>  [398390, 384080, 370220, 356790, 343780, 331180, 318980, 307160, 295710, 284620],
        16 =>  [637450, 614630, 592530, 571120, 550380, 530270, 510780, 491890, 473570, 455810],
        17 =>  [1019960, 983410, 948040, 913750, 880500, 848250, 816970, 786630, 757190, 728630],
        18 =>  [1631930, 1573460, 1516860, 1462000, 1408800, 1357120, 1306880, 1257980, 1210340, 1163880],
        19 =>  [2611090, 2517540, 2426980, 2339200, 2254100, 2171500, 2091300, 2013400, 1937700, 1864100],
        20 =>  [4177740, 4028070, 3883170, 3742930, 3607100, 3475500, 3348100, 3224630, 3105000, 2989000]
    ),
    "Iron Mine" => Dict(
        # Main Building Level => [Level 1, Level 2, ..., Level 20] in base seconds
        1  => [450, 920, 1670, 2880, 4800, 7880, 12810, 20690, 33310, 53510, 85800, 137480, 220170, 352410, 564060, 902550, 1444120, 2310620, 3697000, 5915200],
        2  => [430, 890, 1610, 2770, 4630, 7600, 12350, 19950, 32130, 51630, 82770, 132610, 212370, 339930, 543930, 870330, 1392570, 2228130, 3565030, 5704050],
        3  => [420, 850, 1550, 2670, 4460, 7320, 11900, 19230, 30980, 49780, 79830, 127930, 204830, 327830, 524550, 839300, 1342900, 2148660, 3437870, 5500600],
        4  => [400, 820, 1490, 2580, 4300, 7060, 11470, 18530, 29860, 47980, 76950, 123330, 197450, 316050, 505720, 809170, 1294680, 2071500, 3314410, 5303060],
        5  => [390, 790, 1430, 2480, 4150, 6810, 11070, 17890, 28810, 46290, 74230, 118970, 190410, 304770, 487670, 780290, 1248480, 1997580, 3196130, 5113820],
        6  => [370, 760, 1370, 2380, 3990, 6550, 10650, 17230, 27790, 44670, 71630, 114810, 183790, 294090, 470570, 752930, 1204700, 1927530, 3084050, 4934490],
        7  => [360, 730, 1320, 2290, 3840, 6310, 10260, 16590, 26770, 43050, 69050, 110650, 177130, 283430, 453510, 725640, 1161030, 1857650, 2972250, 4755610],
        8  => [350, 710, 1280, 2210, 3700, 6080, 9890, 15990, 25810, 41490, 66550, 106650, 170750, 273220, 437170, 699490, 1119190, 1790710, 2865140, 4584230],
        9  => [340, 690, 1240, 2150, 3600, 5910, 9610, 15540, 25080, 40320, 64670, 103630, 165930, 265510, 424830, 679740, 1087590, 1740150, 2784250, 4454810],
        10 => [320, 670, 1210, 2090, 3500, 5750, 9350, 15120, 24400, 39220, 62900, 100800, 161380, 258230, 413190, 661120, 1057800, 1692490, 2707990, 4332790],
        11 => [310, 640, 1160, 2010, 3370, 5540, 9010, 14570, 23530, 37820, 60660, 97210, 155610, 249000, 398430, 637510, 1020020, 1632040, 2611270, 4178040],
        12 => [300, 620, 1120, 1940, 3250, 5340, 8690, 14050, 22690, 36470, 58500, 93740, 150060, 240120, 384220, 614770, 983650, 1573850, 2518170, 4029080],
        13 => [290, 600, 1080, 1870, 3130, 5150, 8380, 13550, 21890, 35180, 56430, 90420, 144740, 231610, 370600, 592980, 948780, 1518050, 2428890, 3886230],
        14 => [280, 580, 1050, 1810, 3030, 4980, 8100, 13100, 21160, 34010, 54550, 87410, 139930, 223920, 358300, 573300, 917310, 1467700, 2348320, 3757320],
        15 => [270, 560, 1010, 1750, 2930, 4820, 7840, 12680, 20490, 32930, 52820, 84640, 135480, 216800, 346900, 555060, 888110, 1420980, 2273570, 3637720],
        16 => [260, 540, 980, 1690, 2830, 4650, 7570, 12240, 19790, 31810, 51020, 81760, 130870, 209410, 335070, 536130, 857820, 1372520, 2196040, 3513670],
        17 => [250, 520, 940, 1630, 2730, 4490, 7310, 11820, 19110, 30720, 49270, 78950, 126370, 202210, 323550, 517700, 828330, 1325330, 2120530, 3392850],
        18 => [240, 500, 900, 1560, 2620, 4310, 7020, 11350, 18360, 29510, 47330, 75840, 121400, 194260, 310830, 497340, 795760, 1273220, 2037160, 3259460],
        19 => [230, 480, 870, 1500, 2520, 4140, 6740, 10900, 17630, 28340, 45460, 72850, 116620, 186620, 298610, 477790, 764480, 1223180, 1957090, 3131350],
        20 => [220, 460, 830, 1440, 2410, 3970, 6460, 10450, 16900, 27170, 43580, 69830, 111790, 178880, 286220, 457970, 732760, 1172420, 1875870, 3001400]
    ),
    "Cropland" => Dict(
        # Main Building Level => [Level 1, Level 2, ..., Level 20] in base seconds
        1  => [150, 440, 900, 1650, 2830, 4730, 7780, 12620, 20430, 33080, 53410, 86090, 138650, 223220, 359290, 578210, 930510, 1496930, 2407940, 3872980],
        2  => [140, 420, 870, 1590, 2730, 4560, 7500, 12170, 19710, 31920, 51540, 83120, 133890, 215530, 346850, 558210, 898140, 1444990, 2324730, 3739340],
        3  => [140, 410, 840, 1550, 2660, 4440, 7310, 11860, 19220, 31130, 50270, 81050, 130540, 210180, 338280, 544530, 876180, 1409910, 2268230, 3648740],
        4  => [130, 400, 820, 1500, 2580, 4310, 7100, 11520, 18670, 30240, 48840, 78740, 126830, 204170, 328660, 529010, 851380, 1369890, 2203930, 3545430],
        5  => [130, 390, 790, 1450, 2500, 4180, 6890, 11180, 18120, 29350, 47410, 76430, 123110, 198180, 318990, 513530, 826390, 1329810, 2139530, 3442240],
        6  => [120, 380, 770, 1410, 2430, 4060, 6690, 10860, 17600, 28510, 46050, 74240, 119580, 192500, 309840, 498800, 802750, 1291670, 2078380, 3343830],
        7  => [120, 370, 750, 1370, 2360, 3950, 6510, 10560, 17120, 27730, 44790, 72210, 116310, 187250, 301400, 485170, 780770, 1256390, 2021490, 3252580],
        8  => [120, 360, 730, 1340, 2300, 3850, 6340, 10290, 16680, 27020, 43640, 70360, 113330, 182470, 293710, 472810, 760890, 1224330, 1969910, 3169230],
        9  => [110, 350, 710, 1300, 2240, 3750, 6180, 10030, 16260, 26340, 42550, 68600, 110480, 177870, 286290, 460840, 741620, 1193300, 1920050, 3089070],
        10 => [110, 340, 690, 1270, 2180, 3650, 6020, 9770, 15840, 25660, 41450, 66830, 107630, 173290, 278900, 448970, 722460, 1162630, 1870610, 3009450],
        11 => [100, 330, 680, 1240, 2130, 3560, 5870, 9530, 15450, 25030, 40430, 65180, 104970, 168980, 271970, 437800, 704510, 1133780, 1824280, 2935170],
        12 => [100, 320, 660, 1210, 2080, 3480, 5740, 9310, 15100, 24460, 39510, 63700, 102600, 165190, 265900, 428020, 688800, 1108430, 1783450, 2869250],
        13 => [100, 310, 640, 1180, 2030, 3400, 5610, 9100, 14760, 23910, 38630, 62280, 100310, 161500, 259960, 418420, 673340, 1083500, 1743450, 2805050],
        14 => [90, 300, 630, 1150, 1980, 3320, 5480, 8890, 14420, 23360, 37740, 60850, 98000, 157780, 253960, 408800, 657880, 1058540, 1703160, 2740070],
        15 => [90, 290, 610, 1120, 1930, 3240, 5350, 8680, 14080, 22810, 36850, 59410, 95690, 154070, 248010, 399220, 642500, 1033830, 1663560, 2676530],
        16 => [90, 280, 590, 1090, 1880, 3160, 5220, 8470, 13740, 22260, 35970, 57990, 93390, 150380, 242070, 389650, 627040, 1009000, 1623430, 2611990],
        17 => [80, 270, 580, 1060, 1830, 3080, 5090, 8260, 13400, 21710, 35080, 56560, 91090, 146690, 236140, 380090, 611670, 984270, 1583710, 2548010],
        18 => [80, 260, 560, 1030, 1780, 3000, 4960, 8050, 13060, 21160, 34190, 55130, 88790, 142970, 230170, 370470, 596170, 959370, 1543670, 2483670],
        19 => [80, 250, 540, 1000, 1730, 2920, 4830, 7840, 12720, 20610, 33300, 53700, 86490, 139260, 224180, 360850, 580740, 934480, 1503670, 2419070],
        20 => [70, 240, 520, 970, 1680, 2840, 4700, 7630, 12380, 20060, 32410, 52260, 84160, 135510, 218120, 351080, 564930, 908980, 1462570, 2352980]
    ),
    "Rally Point" => Dict(
        # Main Building Level => [Level 1, Level 2, ..., Level 20] in base seconds
        1  => [2000, 2620, 3340, 4170, 5140, 6260, 7570, 9080, 10830, 12860, 15230, 17970, 21130, 24750, 28900, 33660, 39110, 45340, 52450, 60530],
        2  => [1930, 2530, 3210, 4000, 4930, 6010, 7270, 8720, 10410, 12360, 14640, 17290, 20340, 23830, 27830, 32420, 37690, 43730, 50640, 58510],
        3  => [1860, 2440, 3100, 3860, 4760, 5800, 7020, 8420, 10050, 11930, 14130, 16700, 19630, 23000, 26860, 31280, 36370, 42210, 48830, 56390],
        4  => [1800, 2360, 3000, 3740, 4610, 5620, 6800, 8160, 9740, 11560, 13690, 16180, 19020, 22290, 26030, 30310, 35240, 40890, 47320, 54670],
        5  => [1730, 2270, 2890, 3600, 4440, 5410, 6550, 7860, 9380, 11130, 13190, 15590, 18330, 21480, 25080, 29210, 33970, 39420, 45620, 52700],
        6  => [1670, 2190, 2790, 3480, 4290, 5230, 6330, 7600, 9070, 10760, 12750, 15070, 17720, 20770, 24250, 28240, 32840, 38100, 44100, 50940],
        7  => [1610, 2110, 2690, 3350, 4130, 5040, 6100, 7320, 8740, 10370, 12290, 14520, 17070, 20000, 23350, 27200, 31630, 36700, 42480, 49070],
        8  => [1550, 2040, 2600, 3240, 4000, 4880, 5900, 7090, 8460, 10040, 11890, 14060, 16530, 19370, 22620, 26340, 30630, 35540, 41140, 47530],
        9  => [1490, 1960, 2500, 3120, 3850, 4690, 5680, 6820, 8140, 9660, 11450, 13530, 15910, 18640, 21770, 25350, 29480, 34210, 39590, 45740],
        10 => [1440, 1890, 2410, 3010, 3710, 4530, 5480, 6580, 7860, 9320, 11050, 13060, 15350, 17990, 21000, 24460, 28450, 33020, 38210, 44140],
        11 => [1390, 1830, 2330, 2910, 3590, 4380, 5300, 6370, 7600, 9020, 10690, 12630, 14850, 17400, 20320, 23670, 27530, 31950, 36980, 42720],
        12 => [1340, 1760, 2250, 2810, 3460, 4220, 5110, 6140, 7330, 8700, 10310, 12190, 14330, 16790, 19610, 22840, 26570, 30840, 35690, 41230],
        13 => [1290, 1700, 2170, 2710, 3340, 4080, 4940, 5930, 7080, 8400, 9950, 11770, 13840, 16220, 18940, 22060, 25660, 29780, 34470, 39820],
        14 => [1250, 1640, 2100, 2620, 3230, 3940, 4770, 5730, 6840, 8120, 9620, 11370, 13370, 15670, 18300, 21320, 24800, 28780, 33310, 38490],
        15 => [1200, 1580, 2020, 2520, 3110, 3800, 4600, 5520, 6590, 7820, 9270, 10960, 12890, 15110, 17640, 20550, 23910, 27750, 32120, 37110],
        16 => [1150, 1520, 1940, 2430, 2990, 3650, 4420, 5310, 6340, 7530, 8920, 10550, 12410, 14550, 16990, 19790, 23020, 26720, 30930, 35730],
        17 => [1110, 1460, 1870, 2340, 2880, 3520, 4260, 5120, 6110, 7250, 8590, 10160, 11950, 14010, 16360, 19060, 22180, 25740, 29790, 34420],
        18 => [1070, 1410, 1800, 2250, 2780, 3390, 4110, 4930, 5890, 6990, 8280, 9800, 11520, 13500, 15770, 18370, 21370, 24810, 28720, 33180],
        19 => [1030, 1360, 1740, 2170, 2680, 3270, 3960, 4760, 5680, 6740, 7990, 9450, 11110, 13020, 15210, 17720, 20620, 23940, 27710, 32020],
        20 => [1000, 1310, 1680, 2100, 2590, 3160, 3830, 4600, 5490, 6520, 7720, 9130, 10740, 12590, 14700, 17130, 19940, 23150, 26800, 30960]
    )
)

building_times = Dict(
    s => [ceil(1.3 * t / 3) for t in times] 
    for (s, times) in building_base_times
)

# Capacidade de armazenamento padrão
storage_capacity = Dict("Wood"=>800, "Clay"=>800, "Iron"=>800, "Crop"=>800)

# Custo para treinar um Legionário (Wood, Clay, Iron, Crop)
soldier_cost = Dict(
    "Wood" => 120,
    "Clay" => 100, 
    "Iron" => 150,
    "Crop" => 30
)

# Custos, tempo de treinamento e requisitos das tropas romanas
soldier_data = Dict(
    "Legionnaire" => Dict(
        "Cost" => soldier_cost, 
        "TrainingTime" => "n/a",
        "Requirements" => ["Barracks level 1"]
    )
)

# Restrições

# Construção única por nível
for s in eachindex(buildings), l in 1:20
    @constraint(model, sum(x[s, l, t] for t in 1:T) <= 1)
end

# Limite de 15 construções adicionais (excluindo as 5 iniciais)
initial_buildings = ["Main Building", "Woodcutter", "Clay Pit", "Iron Mine", "Cropland"]
@constraint(model, 
    sum(x[s, l, t] 
        for s in eachindex(buildings) 
        if !(buildings[s] in initial_buildings)
        for l in 1:20 
        for t in 1:T) <= 15
)

# Apenas um edifício de cada tipo (exceto campos de recurso)
for s in eachindex(buildings)
    @constraint(model, sum(x[s, l, t] for l in 1:20, t in 1:T) == 1)
end

# Disponibilidade de recursos (em cada tempo t)
for r_i in eachindex(resources), t in 1:T
    @constraint(model, r[r_i, t] <= storage_capacity[resources[r_i]])
end

# Construções só podem ser feitas atendendo os requisitos
for s in eachindex(buildings), l in 1:20, t in 1:T
    for (req_building, req_level) in building_requirements[buildings[s]]
        req_s = findfirst(==(req_building), buildings)
        @constraint(model, x[s, l, t] <= sum(n[req_s, req_level, τ] for τ in 1:t-1))
    end
end

# Requisitos de construção (campos de recurso)
for t in 1:T, r_i in eachindex(resources)
    resource_name = resources[r_i]  # Converte o índice para o nome do recurso ("Wood", "Clay", etc.)
    @constraint(model, 
        sum(
            x[s, l, t] * resource_required[buildings[s], l][resource_name] 
            for s in eachindex(buildings), l in 1:20
        ) <= r[r_i, t]
    )
end

# Tempo de construção
for s in eachindex(buildings), l in 1:20, t in 1:T
    τ_max = min(t + building_times[buildings[s]][l] - 1, T)
    @constraint(model, n[s,l,τ_max] >= x[s,l,t])
end

# O quartel deve existir antes de treinar soldados
@constraint(model, sum(x[4, l, t] for l in 1:20, t in 1:T) >= 1)

# Recursos suficientes para treinamento de soldados
@constraint(model, 
    sum(
        q_t[t] * soldier_cost[r_name] 
        for t in 1:T, 
        r_name in resources
    ) <= 
    sum(
        r[findfirst(==(r_name), resources), t] 
        for r_name in resources, 
        t in 1:T
    )
)

# Treinamento de soldados
@constraint(model, [t in 1:T, r_i in eachindex(resources)],
    (q_t[t] - q_t[t-1]) * soldier_cost[resources[r_i]] <= r[r_i, t-1]
)

# Quantidade mínima de soldados
@constraint(model, q >= 100)

# Cada soldado consome 1 de população
#@constraint(model, q <= sum(total_population[t] for t in 1:T))

# Função objetivo
@objective(model, Max, sum(total_population[t] for t in 1:T))

# Resolver o modelo
optimize!(model)

# Exibir resultados
if termination_status(model) == MOI.OPTIMAL
    println("\n=== SOLUÇÃO ÓTIMA ENCONTRADA ===")
    
    # População total
    total_pop = sum(value.(total_population[t]) for t in 1:T)
    println("\nPopulação total acumulada: ", total_pop)
    
    # Soldados treinados
    println("Soldados treinados: ", value(q))
    
    # Recursos finais
    println("\nRecursos finais:")
    for r in eachindex(resources)
        println("  $(resources[r]): ", value(r[r, end]))
    end
    
    # Construções realizadas
    println("\nConstruções realizadas:")
    for s in eachindex(buildings)
        built = false
        for l in 1:20, t in 1:T
            if value(x[s, l, t]) > 0.5
                println("  $(buildings[s]) - Nível $l iniciado no tempo $t")
                built = true
                break
            end
        end
        if !built
            println("  $(buildings[s]) - Não construído")
        end
    end
    
    # Níveis finais das construções
    println("\nNíveis finais das construções:")
    for s in eachindex(buildings)
        max_level = 0
        for l in 20:-1:1
            if value(n[s, l, end]) > 0.5
                max_level = l
                break
            end
        end
        println("  $(buildings[s]): Nível $max_level")
    end
    
    # Evolução da população
    println("\nEvolução da população (amostra a cada 12 horas):")
    for t in 1:12:T
        println("  Tempo $t (≈ $(t/3600) horas): População = ", round(Int, value(total_population[t])))
    end
    
else
    println("Não foi possível encontrar uma solução ótima.")
    println("Status: ", termination_status(model))
end